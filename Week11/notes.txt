Javascript is weird because of its flexibility. However, languages tend to last because of their flexibility. 

*Mocha, LiveScript, ECMAScript, Javascript -> alternative names

Originally called Mocha. Java was obscenely popular in the 90s and everyone jumped on the coffee bandwagon, therefore, Mocha for Javascript.

Java and Javascript - "cousins so distantly related they could get married in any state of the union"

ECMAScript is a standard that Java adheres to. 

Javascript is asynchronous. A command can run to completion while multiple other commands are runinng.
Javascript is worked on by an assortion of companies; it is not owned by a single company.

Apparently, Netscape was the browser that decided to have multiple tabs instead of multiple web pages. 
Microsoft vs. Netscape. Microsoft bankrupted Netscape, but got hit by huge fines due to a mononpoly. Netscape created the Mozilla project from which Firefox was born. 
Netscape had enough connections that they were able to get Microsoft to realize that they couldn't monopolize the field. 

In the end of the 90s, early 2000s, you would have to hire a company with a backend and a frontend team to develop a website. 

Javascript is a dynamic, weakly typed, prototype-based language.

Prototyped based inheritance is inheritance that inherits from an object and not a class; it's more stripped down, less rigid. Sort of OO light.

3 ways to create a variable:
*const - never change
*let - local in scope
*var - global in scope (generally, do not use this anymore!!!)

Javascript objects are hash maps. A key can associate to any type of data. A key can be an object, a function, or any data you want.

In JavaScript, there are no less than 5 ways to create an object. 

1. Object literal - create a hashmap (variableName: variableValue)
2. Factory Functions - returns a hashmap
3. Constructor Function - new keyword (synctactic sugar)
4. Object.create() method - makes a new object that has a prototype of another object


Class - a blueprint

Pretend we have a blueprint of a student. We're going to say that this blueprint says that every student has a string that's their name, an integer that's their g-number, and a double for gpa. Some functions like a toString(), some getters(), and some setters(). In classical inheritance, it would get loaded into memory and the class wouldn't store anything. When you call the new keyword, you create an object that has space for name, g-number, and gpa.



abby.__proto__.__proto__.name  


function expression

Example 1: function square(x)
Example 2: const square = function(x)


JavaScript cannot mark data as public or private. But we know that if we use the let keyword, then the data will be created in a local scope. We also know that it is perfectly okay to return a function from a function. Is there any reason why we cannot create a local variable inside of a function and then return a function from inside the function, that because it was created inside the function, can access that local scope. 

JavaScript has a lot of flexibility, so people tend to do 'nasty stuff' to it. It's insecure since it mostly runs on client side.

JavaScript - Asynchronous Programming

What might the web browser need to provide the code runing within it. 
* files
* domain name lookups
* construct a docuemnt with a data structure that's common so you know how to program for the browser and can preview it

There are a lot of common things that the web needs to provide - web api. Sound, location, speech recognition, text-to-speech synthesis etc. are all rpovided byt he web api.


Most interpretations of javascript are single threaded. How does it do everything at once? JavaScript doesn't do it; it asks the web api or the libraries to do it for it. Another program could be mulithreaded, but JavaScript is usually single-threaded. When it calls another ufnction, that function is put onto the stack. With JavaScript, we've got the stack, some api (webapi), and we also have a message queue (FIFO).   
